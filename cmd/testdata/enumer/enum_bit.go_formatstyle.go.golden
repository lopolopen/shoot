// Code generated by "shoot enum -bit -type=FormatStyle ./testdata/enumer"; DO NOT EDIT.

package enumer

import (
	"bytes"
	"fmt"
)

func _() {
	var x [1]struct{}
	_ = x[None-0]
	_ = x[Bold-1]
	_ = x[Italic-2]
	_ = x[Underline-4]
	_ = x[Strikethrough-8]

}

const _formatStyle_all = None | Bold | Italic | Underline | Strikethrough | 0

var _formatStyle_values = []FormatStyle{None, Bold, Italic, Underline, Strikethrough}

var _formatStyle_strings = []string{"None", "Bold", "Italic", "Underline", "Strikethrough"}

var _formatStyle_string_map = map[FormatStyle]string{
	None:          "None",
	Bold:          "Bold",
	Italic:        "Italic",
	Underline:     "Underline",
	Strikethrough: "Strikethrough",
}

var _formatStyle_value_map = map[string]FormatStyle{
	"None":          None,
	"Bold":          Bold,
	"Italic":        Italic,
	"Underline":     Underline,
	"Strikethrough": Strikethrough,
}

// String returns the string value of type FormatStyle
func (f FormatStyle) String() string {
	str, ok := _formatStyle_string_map[f]
	if ok {
		return str
	}
	if f < 0 || f > _formatStyle_all {
		return fmt.Sprintf("%d", f)
	}

	var buf bytes.Buffer
	f_ := f
	for i_ := 0; i_ < len(_formatStyle_values); i_++ {
		v_ := _formatStyle_values[i_]
		if v_ == 0 {
			continue
		}
		if f_ == 0 {
			break
		}
		if f_.Has(v_) {
			fmt.Fprintf(&buf, ", %s", _formatStyle_map[v_])
			f_ = f_.Remove(v_)
		}
	}
	if f_ == 0 && buf.Len() > 0 {
		return string(buf.Bytes()[2:])
	}

	return fmt.Sprintf("%d", f)
}

func (f FormatStyle) Values() []FormatStyle {
	return _formatStyle_values
}

func (f FormatStyle) Strings() []string {
	return _formatStyle_strings
}

func (f FormatStyle) ValueMap() map[string]FormatStyle {
	return _formatStyle_value_map
}

func (f FormatStyle) StringMap() map[FormatStyle]string {
	return _formatStyle_string_map
}

// Has checks if a specific flag is present in the FormatStyle set
func (f FormatStyle) Has(flag FormatStyle) bool {
	return f&flag == flag
}

// Add adds a flag to the FormatStyle set
func (f FormatStyle) Add(flag FormatStyle) FormatStyle {
	return f | flag
}

// Remove removes a flag from the FormatStyle set
func (f FormatStyle) Remove(flag FormatStyle) FormatStyle {
	return f &^ flag
}
