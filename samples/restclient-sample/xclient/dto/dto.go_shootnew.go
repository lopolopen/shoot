// Code generated by "shoot new -getset -json -file=dto.go"; DO NOT EDIT.

package dto

import "encoding/json"

// NewUser constructs a new instance of type User
func NewUser(id string, name string, age string) *User {
	return &User{
		id:   id,
		name: name,
		age:  age,
	}
}

// Id gets the value of field id
func (u *User) Id() string {
	return u.id
}

// Name gets the value of field name
func (u *User) Name() string {
	return u.name
}

// Age gets the value of field age
func (u *User) Age() string {
	return u.age
}

// SetId sets the value of field id
func (u *User) SetId(id_ string) {
	u.id = id_
}

// SetName sets the value of field name
func (u *User) SetName(name_ string) {
	u.name = name_
}

// SetAge sets the value of field age
func (u *User) SetAge(age_ string) {
	u.age = age_
}

type _User_marshal struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	Age  string `json:"age"`
}
type _User_unmarshal struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	Age  string `json:"age"`
}

// MarshalJSON serializes type User to json bytes
func (u User) MarshalJSON() ([]byte, error) {
	data := _User_marshal{
		Id:   u.Id(),
		Name: u.Name(),
		Age:  u.Age(),
	}
	return json.Marshal(data)
}

// UnmarshalJSON deserializes json bytes to type User
func (u *User) UnmarshalJSON(data []byte) error {
	var user_ _User_unmarshal
	if err := json.Unmarshal(data, &user_); err != nil {
		return err
	}
	u.SetId(user_.Id)
	u.SetName(user_.Name)
	u.SetAge(user_.Age)

	return nil
}

// ShootNew exists solely to fulfill the NewShooter interface contract
func (u User) ShootNew() { /*noop*/ }

// NewQueryUsersReq constructs a new instance of type QueryUsersReq
func NewQueryUsersReq(name string) *QueryUsersReq {
	return &QueryUsersReq{
		name: name,
	}
}

// Name gets the value of field name
func (q *QueryUsersReq) Name() string {
	return q.name
}

// SetName sets the value of field name
func (q *QueryUsersReq) SetName(name_ string) {
	q.name = name_
}

type _QueryUsersReq_marshal struct {
	Name string `json:"name"`
}
type _QueryUsersReq_unmarshal struct {
	Name string `json:"name"`
}

// MarshalJSON serializes type QueryUsersReq to json bytes
func (q QueryUsersReq) MarshalJSON() ([]byte, error) {
	data := _QueryUsersReq_marshal{
		Name: q.Name(),
	}
	return json.Marshal(data)
}

// UnmarshalJSON deserializes json bytes to type QueryUsersReq
func (q *QueryUsersReq) UnmarshalJSON(data []byte) error {
	var queryUsersReq_ _QueryUsersReq_unmarshal
	if err := json.Unmarshal(data, &queryUsersReq_); err != nil {
		return err
	}
	q.SetName(queryUsersReq_.Name)

	return nil
}

// ShootNew exists solely to fulfill the NewShooter interface contract
func (q QueryUsersReq) ShootNew() { /*noop*/ }

// NewQueryUsersResp constructs a new instance of type QueryUsersResp
func NewQueryUsersResp(data []User) *QueryUsersResp {
	return &QueryUsersResp{
		data: data,
	}
}

// Data gets the value of field data
func (q *QueryUsersResp) Data() []User {
	return q.data
}

// SetData sets the value of field data
func (q *QueryUsersResp) SetData(data_ []User) {
	q.data = data_
}

type _QueryUsersResp_marshal struct {
	Data []User `json:"data"`
}
type _QueryUsersResp_unmarshal struct {
	Data []User `json:"data"`
}

// MarshalJSON serializes type QueryUsersResp to json bytes
func (q QueryUsersResp) MarshalJSON() ([]byte, error) {
	data := _QueryUsersResp_marshal{
		Data: q.Data(),
	}
	return json.Marshal(data)
}

// UnmarshalJSON deserializes json bytes to type QueryUsersResp
func (q *QueryUsersResp) UnmarshalJSON(data []byte) error {
	var queryUsersResp_ _QueryUsersResp_unmarshal
	if err := json.Unmarshal(data, &queryUsersResp_); err != nil {
		return err
	}
	q.SetData(queryUsersResp_.Data)

	return nil
}

// ShootNew exists solely to fulfill the NewShooter interface contract
func (q QueryUsersResp) ShootNew() { /*noop*/ }

// NewBook constructs a new instance of type Book
func NewBook(sn string, name string, price int) *Book {
	return &Book{
		sn:    sn,
		name:  name,
		price: price,
	}
}

// Sn gets the value of field sn
func (b *Book) Sn() string {
	return b.sn
}

// Name gets the value of field name
func (b *Book) Name() string {
	return b.name
}

// Price gets the value of field price
func (b *Book) Price() int {
	return b.price
}

// SetSn sets the value of field sn
func (b *Book) SetSn(sn_ string) {
	b.sn = sn_
}

// SetName sets the value of field name
func (b *Book) SetName(name_ string) {
	b.name = name_
}

// SetPrice sets the value of field price
func (b *Book) SetPrice(price_ int) {
	b.price = price_
}

type _Book_marshal struct {
	Sn    string `json:"sn"`
	Name  string `json:"name"`
	Price int    `json:"price"`
}
type _Book_unmarshal struct {
	Sn    string `json:"sn"`
	Name  string `json:"name"`
	Price int    `json:"price"`
}

// MarshalJSON serializes type Book to json bytes
func (b Book) MarshalJSON() ([]byte, error) {
	data := _Book_marshal{
		Sn:    b.Sn(),
		Name:  b.Name(),
		Price: b.Price(),
	}
	return json.Marshal(data)
}

// UnmarshalJSON deserializes json bytes to type Book
func (b *Book) UnmarshalJSON(data []byte) error {
	var book_ _Book_unmarshal
	if err := json.Unmarshal(data, &book_); err != nil {
		return err
	}
	b.SetSn(book_.Sn)
	b.SetName(book_.Name)
	b.SetPrice(book_.Price)

	return nil
}

// ShootNew exists solely to fulfill the NewShooter interface contract
func (b Book) ShootNew() { /*noop*/ }

// NewQueryBooksReq constructs a new instance of type QueryBooksReq
func NewQueryBooksReq(name string, language string) *QueryBooksReq {
	return &QueryBooksReq{
		name:     name,
		language: language,
	}
}

// Name gets the value of field name
func (q *QueryBooksReq) Name() string {
	return q.name
}

// Language gets the value of field language
func (q *QueryBooksReq) Language() string {
	return q.language
}

// SetName sets the value of field name
func (q *QueryBooksReq) SetName(name_ string) {
	q.name = name_
}

// SetLanguage sets the value of field language
func (q *QueryBooksReq) SetLanguage(language_ string) {
	q.language = language_
}

type _QueryBooksReq_marshal struct {
	Name     string `json:"name"`
	Language string

	PageSize int

	PageIndex int `json:"PageIndex"`
}
type _QueryBooksReq_unmarshal struct {
	Name     string `json:"name"`
	Language string

	PageSize  int
	PageIndex int `json:"PageIndex"`
}

// MarshalJSON serializes type QueryBooksReq to json bytes
func (q QueryBooksReq) MarshalJSON() ([]byte, error) {
	data := _QueryBooksReq_marshal{
		Name:     q.Name(),
		Language: q.Language(),

		PageSize:  q.PageSize,
		PageIndex: q.PageIndex,
	}
	return json.Marshal(data)
}

// UnmarshalJSON deserializes json bytes to type QueryBooksReq
func (q *QueryBooksReq) UnmarshalJSON(data []byte) error {
	var queryBooksReq_ _QueryBooksReq_unmarshal
	if err := json.Unmarshal(data, &queryBooksReq_); err != nil {
		return err
	}
	q.SetName(queryBooksReq_.Name)
	q.SetLanguage(queryBooksReq_.Language)

	q.PageSize = queryBooksReq_.PageSize
	q.PageIndex = queryBooksReq_.PageIndex

	return nil
}

// ShootNew exists solely to fulfill the NewShooter interface contract
func (q QueryBooksReq) ShootNew() { /*noop*/ }

// NewQueryBooksResp constructs a new instance of type QueryBooksResp
func NewQueryBooksResp(data []Book) *QueryBooksResp {
	return &QueryBooksResp{
		data: data,
	}
}

// Data gets the value of field data
func (q *QueryBooksResp) Data() []Book {
	return q.data
}

// SetData sets the value of field data
func (q *QueryBooksResp) SetData(data_ []Book) {
	q.data = data_
}

type _QueryBooksResp_marshal struct {
	Data []Book `json:"data"`
}
type _QueryBooksResp_unmarshal struct {
	Data []Book `json:"data"`
}

// MarshalJSON serializes type QueryBooksResp to json bytes
func (q QueryBooksResp) MarshalJSON() ([]byte, error) {
	data := _QueryBooksResp_marshal{
		Data: q.Data(),
	}
	return json.Marshal(data)
}

// UnmarshalJSON deserializes json bytes to type QueryBooksResp
func (q *QueryBooksResp) UnmarshalJSON(data []byte) error {
	var queryBooksResp_ _QueryBooksResp_unmarshal
	if err := json.Unmarshal(data, &queryBooksResp_); err != nil {
		return err
	}
	q.SetData(queryBooksResp_.Data)

	return nil
}

// ShootNew exists solely to fulfill the NewShooter interface contract
func (q QueryBooksResp) ShootNew() { /*noop*/ }
