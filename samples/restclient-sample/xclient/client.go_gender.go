// Code generated by "shoot enum -json -file=client.go"; DO NOT EDIT.

package xclient

import (
	"encoding/json"
	"fmt"

	"github.com/lopolopen/shoot"
)

func _() {
	var x [1]struct{}
	_ = x[Unknown-0]
	_ = x[Male-1]
	_ = x[Femal-2]

}

const _gender_all = Unknown | Male | Femal | 0

var _gender_values = []Gender{Unknown, Male, Femal}

var _gender_strings = []string{"Unknown", "Male", "Femal"}

var _gender_string_map = map[Gender]string{
	Unknown: "Unknown",
	Male:    "Male",
	Femal:   "Femal",
}

var _gender_value_map = map[string]Gender{
	"Unknown": Unknown,
	"Male":    Male,
	"Femal":   Femal,
}

// String returns the string value of type Gender
func (g Gender) String() string {
	str, ok := _gender_string_map[g]
	if ok {
		return str
	}
	if g < 0 || g > _gender_all {
		return fmt.Sprintf("%d", g)
	}

	return fmt.Sprintf("%d", g)
}

func (g Gender) Values() []Gender {
	return _gender_values
}

func (g Gender) Strings() []string {
	return _gender_strings
}

func (g Gender) ValueMap() map[string]Gender {
	return _gender_value_map
}

func (g Gender) StringMap() map[Gender]string {
	return _gender_string_map
}

// MarshalJSON implements the json.Marshaler interface for Gender
func (g Gender) MarshalJSON() ([]byte, error) {
	return json.Marshal(g.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Gender
func (g *Gender) UnmarshalJSON(data []byte) error {
	var s_ string
	var v_ Gender
	var err error
	if err = json.Unmarshal(data, &s_); err != nil {
		return fmt.Errorf("Gender enum should be a string, got %s", data)
	}

	if v_, err = shoot.ParseEnum[Gender](s_); err != nil {
		return err
	}
	*g = v_
	return nil
}

// ShootEnum exists solely to fulfill the EnumShooter interface contract
func (g Gender) ShootEnum() { /*noop*/ }
