// Code generated by "shoot new -getset -json -file=client.go"; DO NOT EDIT.

package myclient

import "encoding/json"

// NewKV constructs a new instance of type KV
func NewKV(key string, value string) *KV {
	return &KV{
		key:   key,
		value: value,
	}
}

// Key gets the value of field key
func (k *KV) Key() string {
	return k.key
}

// Value gets the value of field value
func (k *KV) Value() string {
	return k.value
}

// SetKey sets the value of field key
func (k *KV) SetKey(key_ string) {
	k.key = key_
}

// SetValue sets the value of field value
func (k *KV) SetValue(value_ string) {
	k.value = value_
}

type _KV_marshal struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}
type _KV_unmarshal struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// MarshalJSON serializes type KV to json bytes
func (k KV) MarshalJSON() ([]byte, error) {
	data := _KV_marshal{
		Key:   k.Key(),
		Value: k.Value(),
	}
	return json.Marshal(data)
}

// UnmarshalJSON deserializes json bytes to type KV
func (k *KV) UnmarshalJSON(data []byte) error {
	var kV_ _KV_unmarshal
	if err := json.Unmarshal(data, &kV_); err != nil {
		return err
	}
	k.SetKey(kV_.Key)
	k.SetValue(kV_.Value)

	return nil
}

// NewBook constructs a new instance of type Book
func NewBook(name string, price int) *Book {
	return &Book{
		name:  name,
		price: price,
	}
}

// Name gets the value of field name
func (b *Book) Name() string {
	return b.name
}

// Price gets the value of field price
func (b *Book) Price() int {
	return b.price
}

// SetName sets the value of field name
func (b *Book) SetName(name_ string) {
	b.name = name_
}

// SetPrice sets the value of field price
func (b *Book) SetPrice(price_ int) {
	b.price = price_
}

type _Book_marshal struct {
	Name  string `json:"name"`
	Price int    `json:"price"`
}
type _Book_unmarshal struct {
	Name  string `json:"name"`
	Price int    `json:"price"`
}

// MarshalJSON serializes type Book to json bytes
func (b Book) MarshalJSON() ([]byte, error) {
	data := _Book_marshal{
		Name:  b.Name(),
		Price: b.Price(),
	}
	return json.Marshal(data)
}

// UnmarshalJSON deserializes json bytes to type Book
func (b *Book) UnmarshalJSON(data []byte) error {
	var book_ _Book_unmarshal
	if err := json.Unmarshal(data, &book_); err != nil {
		return err
	}
	b.SetName(book_.Name)
	b.SetPrice(book_.Price)

	return nil
}
