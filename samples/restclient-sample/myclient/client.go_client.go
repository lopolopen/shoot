// Code generated by "shoot rest -type=Client"; DO NOT EDIT.

package myclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/lopolopen/shoot"
)

type _Client struct {
	client *http.Client
	conf   *shoot.RestConf
}

func (c *_Client) Get(ctx context.Context, key string) (*KV, error) {
	path := "/get"

	url, err := url.JoinPath(c.conf.BaseURL(), path)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, err
	}

	query := req.URL.Query()
	query.Set("key", fmt.Sprintf("%v", key))
	req.URL.RawQuery = query.Encode()

	req.Header.Add("Accept", "application/json")

	resp, err := c.client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	var kV_ KV
	err = json.Unmarshal(body, &kV_)
	if err != nil {
		return nil, err
	}
	return &kV_, nil
}

func (c *_Client) Set(ctx context.Context, kv *KV) error {
	path := "/set"

	url, err := url.JoinPath(c.conf.BaseURL(), path)
	if err != nil {
		return err
	}

	bodyJson, err := json.Marshal(kv)
	if err != nil {
		return err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bytes.NewReader(bodyJson))
	if err != nil {
		return err
	}

	req.Header.Add("Accept", "application/json")

	resp, err := c.client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	return nil
}

func (c *_Client) GetUser(ctx context.Context, userID string, q1 int, q2 string) (*Book, error) {
	path := "/users/{id}"

	path = strings.Replace(path, "{id}", fmt.Sprintf("%v", userID), 1)

	url, err := url.JoinPath(c.conf.BaseURL(), path)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, err
	}

	query := req.URL.Query()
	query.Set("a1", fmt.Sprintf("%v", q1))
	query.Set("q2", fmt.Sprintf("%v", q2))
	req.URL.RawQuery = query.Encode()

	req.Header.Add("Accept", "application/json")

	resp, err := c.client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	var book_ Book
	err = json.Unmarshal(body, &book_)
	if err != nil {
		return nil, err
	}
	return &book_, nil
}

func init() {
	shoot.Register[Client](func(conf shoot.RestConf) shoot.RestClient {
		return &_Client{
			conf: &conf,
			client: &http.Client{
				Timeout: time.Duration(conf.Timeout()) * time.Second,
			},
		}
	})
}
