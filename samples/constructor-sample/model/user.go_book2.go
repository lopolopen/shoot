// Code generated by "shoot new -getset -json -type=Book2"; DO NOT EDIT.

package model

import "encoding/json"

// NewBook2 constructs a new instance of type Book2
func NewBook2(name string, names []string, owner *User) *Book2 {
	return &Book2{
		name:  name,
		names: names,
		owner: owner,
	}
}

// Name gets the value of field name
func (b *Book2) Name() string {
	return b.name
}

// Names gets the value of field names
func (b *Book2) Names() []string {
	return b.names
}

// Owner gets the value of field owner
func (b *Book2) Owner() *User {
	return b.owner
}

// SetName sets the value of field name
func (b *Book2) SetName(name_ string) {
	b.name = name_
}

// SetNames sets the value of field names
func (b *Book2) SetNames(names_ []string) {
	b.names = names_
}

// SetOwner sets the value of field owner
func (b *Book2) SetOwner(owner_ *User) {
	b.owner = owner_
}

type _Book2_marshal struct {
	Name  string   `json:"name"`
	Names []string `json:"names"`
	Owner *User    `json:"owner"`
}

type _Book2_unmarshal struct {
	Name  string   `json:"name"`
	Names []string `json:"names"`
	Owner *User    `json:"owner"`
}

// MarshalJSON serializes type Book2 to json bytes
func (b Book2) MarshalJSON() ([]byte, error) {
	data := _Book2_marshal{
		Name:  b.Name(),
		Names: b.Names(),
		Owner: b.Owner(),
	}
	return json.Marshal(data)
}

// UnmarshalJSON deserializes json bytes to type Book2
func (b *Book2) UnmarshalJSON(data []byte) error {
	var book2_ _Book2_unmarshal
	if err := json.Unmarshal(data, &book2_); err != nil {
		return nil
	}

	b.SetName(book2_.Name)
	b.SetNames(book2_.Names)
	b.SetOwner(book2_.Owner)
	return nil
}
