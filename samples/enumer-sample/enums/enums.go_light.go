// Code generated by "shoot enum -json -text -file=enums.go"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"

	"github.com/lopolopen/shoot"
)

func _() {
	var x [1]struct{}
	_ = x[LightRed-0]
	_ = x[LightYello-1]
	_ = x[LightGreen-2]

}

const _light_all = LightRed | LightYello | LightGreen | 0

var _light_values = []Light{LightRed, LightYello, LightGreen}

var _light_strings = []string{"Red", "Yello", "Green"}

var _light_string_map = map[Light]string{
	LightRed:   "Red",
	LightYello: "Yello",
	LightGreen: "Green",
}

var _light_value_map = map[string]Light{
	"Red":   LightRed,
	"Yello": LightYello,
	"Green": LightGreen,
}

// String returns the string value of type Light
func (l Light) String() string {
	str, ok := _light_string_map[l]
	if ok {
		return str
	}
	if l < 0 || l > _light_all {
		return fmt.Sprintf("%d", l)
	}

	return fmt.Sprintf("%d", l)
}

func (l Light) Values() []Light {
	return _light_values
}

func (l Light) Strings() []string {
	return _light_strings
}

func (l Light) ValueMap() map[string]Light {
	return _light_value_map
}

func (l Light) StringMap() map[Light]string {
	return _light_string_map
}

// MarshalJSON implements the json.Marshaler interface for Light
func (l Light) MarshalJSON() ([]byte, error) {
	return json.Marshal(l.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Light
func (l *Light) UnmarshalJSON(data []byte) error {
	var s_ string
	var v_ Light
	var err error
	if err = json.Unmarshal(data, &s_); err != nil {
		return fmt.Errorf("Light enum should be a string, got %s", data)
	}

	if v_, err = shoot.ParseEnum[Light](s_); err != nil {
		return err
	}
	*l = v_
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for Light
func (l Light) MarshalText() ([]byte, error) {
	return []byte(l.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Light
func (l *Light) UnmarshalText(text []byte) error {
	var v_ Light
	var err error
	if v_, err = shoot.ParseEnum[Light](string(text)); err != nil {
		return err
	}
	*l = v_
	return nil
}

// ShootEnum
func (l Light) ShootEnum() { /*noop*/ }
