// Code generated by "{{.Cmd}}"; DO NOT EDIT.

package {{.PackageName}}

type _{{.TypeName}} struct{
    client *http.Client
	conf   *shoot.RestConf
}

{{range $item := .MethodList}}
func (c *_{{$.TypeName}}) {{index $.SigMap .}} {
    {{- $r := index $.ResultTypeMap . -}}
    {{- $return := "err" -}}
    {{- if $r -}}
    {{- $return = "nil, err" -}}
    {{- end }}
    path := "{{index $.PathMap .}}"
    
    {{$pms := index $.PathParamsMap .}}
    {{if $pms}}
    {{range $pms -}}
    {{- $key := . -}}
    {{- $alias := index (index $.AliasMap $item) . -}}
    {{- if $alias -}}{{- $key = $alias -}}{{- end -}}
    path = strings.Replace(path, "{{printf "{%s}" $key}}", fmt.Sprintf("%v", {{.}}), 1){{"\n"}}
    {{- end}}
    {{end}}

    url, err := url.JoinPath(c.conf.BaseURL(), path)
    if err != nil {
        return {{$return}}
    }
    {{$m := index $.HTTPMethodMap .}}
    {{$body := "nil"}}
    {{if eq $m "POST"}}
    {{$p := index $.BodyParamMap .}}
    bodyJson, err := json.Marshal({{$p}})
    if err != nil {
        return {{$return}}
    }
    {{$body = "bytes.NewReader(bodyJson)"}}
    {{end}}
    req, err := http.NewRequestWithContext(ctx, "{{$m}}", url, {{$body}})
    if err != nil {
        return {{$return}}
    }

    {{if eq $m "GET"}}
    {{$qms := index $.QueryParamsMap .}}
    {{if $qms}}
    query := req.URL.Query() 
    {{range $qms -}}
    {{- $key := . -}}
    {{- $alias := index (index $.AliasMap $item) . -}}
    {{- if $alias -}}{{- $key = $alias -}}{{- end -}}
    query.Set("{{$key}}", fmt.Sprintf("%v", {{.}})){{"\n"}}
    {{- end}}req.URL.RawQuery = query.Encode()
    {{end}}
    {{end}}
    
    req.Header.Add("Accept", "application/json")

    
    resp, err := c.client.Do(req)
    if err != nil {
        return {{$return}}
    }
    defer resp.Body.Close()
    {{if $r}}
    body, err := io.ReadAll(resp.Body)
	if err != nil {
		return {{$return}}
	}
    var {{camelCase $r}}_ {{$r}}
    err = json.Unmarshal(body, &{{camelCase $r}}_)
    if err != nil {
		return {{$return}}
	}
    return &{{camelCase $r}}_, nil
    {{else}}
    return nil
    {{- end -}}
}
{{end}}

func init() {
	shoot.Register[{{.TypeName}}](func(conf shoot.RestConf) shoot.RestClient {
		return &_{{.TypeName}}{
			conf: &conf,
			client: &http.Client{
				Timeout: time.Duration(conf.Timeout()) * time.Second,
			},
		}
	})
}
