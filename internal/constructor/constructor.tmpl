{{- $this := firstLower .TypeName -}}
{{- $shoot := "shoot." -}}
{{- if .Self -}}
{{- $shoot = "" -}}
{{- end -}}

// Code generated by "{{.Cmd}}"; DO NOT EDIT.

package {{.PackageName}}

{{if .Imports}}
import (
	{{.Imports}}
)
{{end}}
{{if .Json -}}
import "encoding/json"
{{- end}}
{{if and .Option (not .Self) -}}
import "github.com/lopolopen/shoot"
{{- end}}

// New{{.TypeName}} constructs a new instance of type {{.TypeName}}
func New{{.TypeName}}({{range .NewList}}{{.}} {{typeof .}},{{end}}) *{{.TypeName}} {
	return &{{.TypeName}}{ 
		{{range .NewList -}}
		{{.}}: {{.}},
		{{end}}
	}
}

{{if .Option}}
// With initializes this instance using the functional options pattern
func ({{$this}} *{{.TypeName}})With(opts ...{{$shoot}}Option[{{.TypeName}}, *{{.TypeName}}]) *{{.TypeName}} { 
	{{- if .DefaultList}}
	{{$this}}.SetDefault()
	{{end -}}
	for _, opt := range opts {
        opt({{$this}})
    }
    return {{$this}}
}

{{range .AllList -}}
// {{pascalCase .}}Of{{$.TypeName}} is a configuration for the filed {{.}}
func {{pascalCase .}}Of{{$.TypeName}}({{camelCase .}}_ {{typeof .}}){{$shoot}}Option[{{$.TypeName}}, *{{$.TypeName}}] {
	 return func({{$this}} *{{$.TypeName}}) {
        {{$this}}.{{.}} = {{camelCase .}}_ 
    }
}
{{end}}

{{if .DefaultList}}
// SetDefault sets the default values
func ({{$this}} *{{.TypeName}})SetDefault(){
	{{- range .DefaultList -}}
	{{$this}}.{{.}} = {{defaultof .}}{{"\n"}}
	{{- end -}}
}
{{- end}}
{{end}}


{{if .GetSet}}
{{range .GetterList -}}
// {{pascalCase .}} gets the value of field {{.}}
func ({{$this}} *{{$.TypeName}}){{pascalCase .}}() {{typeof .}} {
	return {{$this}}.{{.}}
}
{{end}}

{{range .SetterList}}
// Set{{pascalCase .}} sets the value of field {{.}}
func ({{$this}} *{{$.TypeName}})Set{{pascalCase .}}({{.}}_ {{typeof .}}) {
	{{$this}}.{{.}} = {{.}}_
}
{{end}}
{{end}}

{{if .Json}}
type _{{.TypeName}}_marshal struct { 
	{{range .GetterList -}}
	{{pascalCase .}} {{typeof .}}{{if (jsontagof .)}}`json:"{{jsontagof .}}"`{{end}}{{"\n"}}
	{{- end}}
	{{range $.ExportedList}} 
	{{pascalCase .}} {{typeof .}} {{if (jsontagof .)}}`json:"{{jsontagof .}}"`{{end}}{{"\n"}}
	{{- end}}
}

type _{{.TypeName}}_unmarshal struct { 
	{{range .SetterList -}}
	{{pascalCase .}} {{typeof .}} {{if (jsontagof .)}}`json:"{{jsontagof .}}"`{{end}}{{"\n"}}
	{{- end}}
	{{range .ExportedList -}}
	{{pascalCase .}} {{typeof .}} {{if (jsontagof .)}}`json:"{{jsontagof .}}"`{{end}}{{"\n"}}
	{{- end}}
}

// MarshalJSON serializes type {{.TypeName}} to json bytes
func ({{$this}} {{.TypeName}})MarshalJSON()([]byte, error) {
	data := _{{.TypeName}}_marshal{ 
		{{range .GetterList -}}
		{{pascalCase .}}: {{$this}}.{{pascalCase .}}(),{{"\n"}}
		{{- end}}
		{{range .ExportedList -}}
		{{.}}: {{$this}}.{{.}},{{"\n"}}
		{{- end}}
	}
	{{if not .EmbedList -}}
	return json.Marshal(data)
	{{- else}}
	values := make(map[string]interface{})
	{{range $i, $v := .EmbedList -}}
	j{{$i}}, err := json.Marshal({{$this}}.{{$v}})
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal(j{{$i}}, &values)
	if err != nil {
		return nil, err
	}
	{{- end}}
	j, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal(j, &values)
	if err != nil {
		return nil, err
	}
	return json.Marshal(values)
	{{- end}}
}

// UnmarshalJSON deserializes json bytes to type {{.TypeName}}
func ({{$this}} *{{.TypeName}})UnmarshalJSON(data []byte) error {
	var {{camelCase .TypeName}}_ _{{.TypeName}}_unmarshal
	if err := json.Unmarshal(data, &{{camelCase .TypeName}}_); err != nil {
		return err
	}
	{{range .SetterList -}}
	{{$this}}.Set{{pascalCase .}}({{camelCase $.TypeName}}_.{{pascalCase .}}){{"\n"}}
	{{- end}}
	{{range .ExportedList -}}
	{{$this}}.{{.}} = {{camelCase $.TypeName}}_.{{.}}{{"\n"}}
	{{- end}} 
	{{if .EmbedList -}}
	all := make(map[string]interface{})
	err := json.Unmarshal(data, &all)
	if err != nil {
		return err
	}
	j, err := json.Marshal({{camelCase .TypeName}}_ )
	if err != nil {
		return err
	}
	some := make(map[string]interface{})
	err = json.Unmarshal(j, &some)
	if err != nil {
		return err
	}
	for key := range some {
		delete(all, key)
	}
	jrest, err := json.Marshal(all)
	if err != nil {
		return err
	}
	{{range .EmbedList -}}
		err = json.Unmarshal(jrest, &{{$this}}.{{.}})
		if err != nil {
			return err
		}
	{{- end}}
	{{- end}}
	return nil
}
{{end}}

// ShootNew exists solely to fulfill the NewShooter interface contract
func ({{$this}} {{.TypeName}}) ShootNew() { /*noop*/ }