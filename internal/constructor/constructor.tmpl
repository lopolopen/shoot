// Code generated by "{{.Cmd}}"; DO NOT EDIT.

package {{.PackageName}}

{{if .Json}}
import "encoding/json"
{{end}}

// New{{.TypeName}} constructs a new instance of type {{.TypeName}}
func New{{.TypeName}}({{range .NewList}}{{.}} {{typeof .}},{{end}}) *{{.TypeName}} {
	return &{{.TypeName}}{ {{range .NewList}}
		{{.}}: {{.}},{{end}}
	}
}

{{if .Option}}
// With initializes this instance using the functional options pattern
func ({{firstLower .TypeName}} *{{.TypeName}})With(opts ..._opt_[{{.TypeName}}, *{{.TypeName}}]) *{{.TypeName}} { 
	{{firstLower .TypeName}}._def_()
	for _, opt := range opts {
        opt({{firstLower .TypeName}})
    }
    return {{firstLower .TypeName}}
}

{{range .AllList}}
func {{pascalCase .}}Of{{$.TypeName}}({{camelCase .}} {{typeof .}})_opt_[{{$.TypeName}}, *{{$.TypeName}}] {
	 return func({{firstLower $.TypeName}} *{{$.TypeName}}) {
        {{firstLower $.TypeName}}.{{.}} = {{camelCase .}} 
    }
}
{{end}}

func ({{firstLower .TypeName}} *{{.TypeName}})_def_(){
	{{range .DefaultList}}{{firstLower $.TypeName}}.{{.}} = {{defaultof .}}
	{{end}}
}
{{end}}


{{if .GetSet}}
{{range .GetterList}}
// {{pascalCase .}} gets the value of field {{.}}
func ({{firstLower $.TypeName}} *{{$.TypeName}}){{pascalCase .}}() {{typeof .}} {
	return {{firstLower $.TypeName}}.{{.}}
}
{{end}}

{{range .SetterList}}
// Set{{pascalCase .}} sets the value of field {{.}}
func ({{firstLower $.TypeName}} *{{$.TypeName}})Set{{pascalCase .}}({{.}} {{typeof .}}) {
	{{firstLower $.TypeName}}.{{.}} = {{.}}
}
{{end}}
{{end}}

{{if .Json}}
type _{{.TypeName}}_marshal struct { {{range .GetterList}}
	{{pascalCase .}} {{typeof .}}{{if (jsontagof .)}}`json:"{{jsontagof .}}"`{{end}}{{end}}
	{{range .ExportedList}} {{pascalCase .}} {{typeof .}} {{if (jsontagof .)}}`json:"{{jsontagof .}}"`{{end}}
	{{end}}
}

type _{{.TypeName}}_unmarshal struct { {{range .SetterList}}
	{{pascalCase .}} {{typeof .}} {{if (jsontagof .)}}`json:"{{jsontagof .}}"`{{end}}{{end}}
	{{range .ExportedList}}{{pascalCase .}} {{typeof .}} {{if (jsontagof .)}}`json:"{{jsontagof .}}"`{{end}}
	{{end}}
}

// MarshalJSON serializes type {{.TypeName}} to json bytes
func ({{firstLower .TypeName}} {{.TypeName}})MarshalJSON()([]byte, error) {
	data := _{{.TypeName}}_marshal{ {{range .GetterList}}
		{{pascalCase .}}: {{firstLower $.TypeName}}.{{pascalCase .}}(),{{end}}
		{{range .ExportedList}}{{.}}: {{firstLower $.TypeName}}.{{.}},
		{{end}}
	}
	return json.Marshal(data)
}

// UnmarshalJSON deserializes json bytes to type {{.TypeName}}
func ({{firstLower .TypeName}} *{{.TypeName}})UnmarshalJSON(data []byte) error {
	var {{camelCase .TypeName}}_ _{{.TypeName}}_unmarshal
	if err := json.Unmarshal(data, &{{camelCase .TypeName}}_); err != nil {
		return nil
	}
	{{range .SetterList}}
	{{firstLower $.TypeName}}.Set{{pascalCase .}}({{camelCase $.TypeName}}_.{{pascalCase .}}){{end}}
	{{range .ExportedList}}{{firstLower $.TypeName}}.{{.}} = {{camelCase $.TypeName}}_.{{.}}
	{{end}} return nil
}
{{end}}