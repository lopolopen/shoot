// Code generated by "{{.Cmd}}"; DO NOT EDIT.

package {{.PackageName}}


func _() {
	var x [1]struct{}
	{{range .NameList -}}
	_ = x[{{.}}-{{valueof .}}]{{"\n"}}
	{{- end}}
}

var _{{camelCase .TypeName}}_values = []{{.TypeName}}{
	{{range .NameList -}}
	{{.}},{{"\n"}}
	{{- end}}
}

const _{{camelCase .TypeName}}_all = 0{{range .NameList}} | {{.}}{{end}}


var _{{camelCase .TypeName}}_map = map[{{.TypeName}}]string{
	{{range .NameList -}}
	{{.}}: "{{strof .}}",{{"\n"}}
	{{- end}}
}

// String returns the string value of type {{.TypeName}}
func ({{firstLower .TypeName}} {{.TypeName}}) String() string {
	str, ok := _{{camelCase .TypeName}}_map[{{firstLower .TypeName}}]
	if ok {
		return str
	}
	if {{firstLower .TypeName}} < 0 || {{firstLower .TypeName}} > _{{camelCase .TypeName}}_all {
		return fmt.Sprintf("%d", {{firstLower .TypeName}})
	}
	{{if .Bitwise}}
	var buf bytes.Buffer
	{{firstLower .TypeName}}_ := {{firstLower .TypeName}}
	for i_ := 0; i_ < len(_{{camelCase .TypeName}}_values); i_++ {
		v_ := _{{camelCase .TypeName}}_values[i_]
		if v_ == 0 {
			continue
		}
		if {{firstLower .TypeName}}_ == 0 {
			break
		}
		if {{firstLower .TypeName}}_.Has(v_) {
			fmt.Fprintf(&buf, ", %s", _{{camelCase .TypeName}}_map[v_])
			{{firstLower .TypeName}}_ = {{firstLower .TypeName}}_.Remove(v_)
		}
	}
	if {{firstLower .TypeName}}_ == 0 && buf.Len() > 0 {
		return string(buf.Bytes()[2:])
	}
	{{end}}
	return fmt.Sprintf("%d", {{firstLower .TypeName}})
}

{{if .Bitwise}}
// Has checks if a specific flag is present in the Enum set.
func ({{firstLower $.TypeName}} {{.TypeName}}) Has(flag {{.TypeName}}) bool {
	return {{firstLower $.TypeName}}&flag == flag
}


// Add adds a flag to the Enum set.
func ({{firstLower $.TypeName}} {{.TypeName}}) Add(flag {{.TypeName}}) {{.TypeName}} {
	return {{firstLower $.TypeName}} | flag
}

// Remove removes a flag from the Enum set.
func ({{firstLower $.TypeName}} {{.TypeName}}) Remove(flag {{.TypeName}}) {{.TypeName}} {
	return {{firstLower $.TypeName}} &^ flag 
}
{{end}}
