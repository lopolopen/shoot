// Code generated by "shoot enum -bit -type=FormatStyle ./testdata/enumer"; DO NOT EDIT.

package enumer

import (
	"bytes"
	"fmt"
)

func _() {
	var x [1]struct{}
	_ = x[None-0]
	_ = x[Bold-1]

}

var _formatstyle_values = []FormatStyle{
	None,
	Bold,
}

const _formatstyle_all = 0 | None | Bold

var _formatstyle_map = map[FormatStyle]string{
	None: "None",
	Bold: "Bold",
}

// String returns the string value of type FormatStyle
func (f FormatStyle) String() string {
	str, ok := _formatstyle_map[f]
	if ok {
		return str
	}
	if f < 0 || f > _formatstyle_all {
		return fmt.Sprintf("%d", f)
	}

	var buf bytes.Buffer
	f_ := f
	for i_ := 0; i_ < len(_formatstyle_values); i_++ {
		v_ := _formatstyle_values[i_]
		if v_ == 0 {
			continue
		}
		if f_ == 0 {
			break
		}
		if f_.Has(v_) {
			fmt.Fprintf(&buf, ", %s", _formatstyle_map[v_])
			f_ = f_.Remove(v_)
		}
	}
	if f_ == 0 && buf.Len() > 0 {
		return string(buf.Bytes()[2:])
	}

	return fmt.Sprintf("%d", f)
}

// Has checks if a specific flag is present in the Enum set.
func (f FormatStyle) Has(flag FormatStyle) bool {
	return f&flag == flag
}

// Add adds a flag to the Enum set.
func (f FormatStyle) Add(flag FormatStyle) FormatStyle {
	return f | flag
}

// Remove removes a flag from the Enum set.
func (f FormatStyle) Remove(flag FormatStyle) FormatStyle {
	return f &^ flag
}
