// Code generated by "shoot new -getset -opt -type=RestConf"; DO NOT EDIT.

package shoot

import (
	"time"
)

// NewRestConf constructs a new instance of type RestConf
func NewRestConf(baseURL string, timeout time.Duration, defaultHeaders map[string]string) *RestConf {
	return &RestConf{
		baseURL:        baseURL,
		timeout:        timeout,
		defaultHeaders: defaultHeaders,
	}
}

// With initializes this instance using the functional options pattern
func (r *RestConf) With(opts ...Option[RestConf, *RestConf]) *RestConf {
	for _, opt := range opts {
		opt(r)
	}
	return r
}

// BaseURLOfRestConf is a configuration for the filed baseURL
func BaseURLOfRestConf(baseURL_ string) Option[RestConf, *RestConf] {
	return func(r *RestConf) {
		r.baseURL = baseURL_
	}
}

// TimeoutOfRestConf is a configuration for the filed timeout
func TimeoutOfRestConf(timeout_ time.Duration) Option[RestConf, *RestConf] {
	return func(r *RestConf) {
		r.timeout = timeout_
	}
}

// DefaultHeadersOfRestConf is a configuration for the filed defaultHeaders
func DefaultHeadersOfRestConf(defaultHeaders_ map[string]string) Option[RestConf, *RestConf] {
	return func(r *RestConf) {
		r.defaultHeaders = defaultHeaders_
	}
}

// MiddlewaresOfRestConf is a configuration for the filed Middlewares
func MiddlewaresOfRestConf(middlewares_ []Middleware) Option[RestConf, *RestConf] {
	return func(r *RestConf) {
		r.Middlewares = middlewares_
	}
}

// BaseURL gets the value of field baseURL
func (r *RestConf) BaseURL() string {
	return r.baseURL
}

// Timeout gets the value of field timeout
func (r *RestConf) Timeout() time.Duration {
	return r.timeout
}

// DefaultHeaders gets the value of field defaultHeaders
func (r *RestConf) DefaultHeaders() map[string]string {
	return r.defaultHeaders
}

// SetBaseURL sets the value of field baseURL
func (r *RestConf) SetBaseURL(baseURL_ string) {
	r.baseURL = baseURL_
}

// SetTimeout sets the value of field timeout
func (r *RestConf) SetTimeout(timeout_ time.Duration) {
	r.timeout = timeout_
}

// SetDefaultHeaders sets the value of field defaultHeaders
func (r *RestConf) SetDefaultHeaders(defaultHeaders_ map[string]string) {
	r.defaultHeaders = defaultHeaders_
}

// ShootNew exists solely to fulfill the NewShooter interface contract
func (r RestConf) ShootNew() { /*noop*/ }
